1)see note 18 below
import psana
myDataSource = psana.MPIDataSource("exp=sxrlr0716:run=71")
my_events =  myDataSource.events()
evt = next(my_events)
env = myDataSource.env()
configs = env.configStore()
configs.keys()
andor_config = configs.get(psana.Andor.ConfigV2)
andor_config.readoutSpeedIndex()
history




4) have the config generator update as opposed to rewrite existing config file.

5) have config generator save existing configuration before rewriting.



7) make recursive svd parallelizable. I guess it is already. ok, then condense h5 output into a single useful file. merge svd from multiple cores into single core.

8) setup jupyter examples to demonstrate how to use

9) script for setting up user .bashrc to source psconda and link their home to their experiments so jupyter can find it.

10) auto detector which config... for slow vs fast cameras? 

11) how to manage non-meaningful-core-number is h5?

12) initialization for analysisFunctions.py.  Zach and Teddy said something about class initialization

13) conditional IPython.embed() that can be turned off once the function is fine tuned.  E.g. for determining the roi of the system





18) add daq config to summarizier softXRayDataAndControls/myAnalysisTools/reference_notes

19) add rank to detector object. (done for some previous users. will allow for mpi collect on ffb nodes for hit finding)
MPIDataSource('exp=sxrx22915:run='+runnum+':smd:dir=/reg/d/ffb/sxr/sxrx22915/xtc:live')

20) make destination default small_data
